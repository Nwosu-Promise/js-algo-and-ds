Big-O  gives us the numeric representation of the performance of code
big O talks about the relationship between the input size and its relationship to the runtime.

We are talking about the worse case scenario - the upperbound runtime
- linear - as the input scales, the output scales (f(n) = n)
- quadratic - as the input grows, the output squares (f(n) = n2)
- constant - as the input grows, the runtime is constant (f(n) = 1)
- it could be entirely different 

loop - 
    - two loops beside each other O(n + n) = O(2n)
    - two nested loops O(n * n) = O(n2)

Simplifying big-o notation 
    - Constants dont matter O(2n) will be O(n) and O(500) will be O(1), 
    O(13n2) will be O(n2)
    - Smaller terms dont matter e.g O(n +10) will be O(n) O(1000n + 50) 
    will be O(n), O(n2 + 5n +8) will be O(n2)


Big O Shorthands
    - Arithmetic operations are constant 
    - variable assignment is contant
    - Accessing element in an array using index or object is constant
    - In a loop, the complextiy is the length of the loop times the complextiy
     of whatever happens inside the loop

Space complextiy
    - Most primitives (bool, num, undefined and null) are constant space.
    - String require O(n) where n is the string lenght 
    - Refernce types are generally O(n), where n is lenght(for arrays) or the number
    of keys (fro objects)

Logarithms
    - Certain searching algorithms have logarithmic time complexity.
    - Efficient sorting algorithms involve logarithms.
    - Recursion sometimes involves logarithmic space complexity.